[changelog]
# changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

"""
# template for the changelog body
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [Unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group }}
    {% for commit in commits %}
        - {% if commit.scope %}**{{ commit.scope }}**: {% endif %}{{ commit.message | upper_first }}{% if commit.breaking %} **[BREAKING]**{% endif %}{% if commit.github.pr_number %} ([#{{ commit.github.pr_number }}](https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/pull/{{ commit.github.pr_number }})){% endif %}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Clean up scope formatting
  { pattern = '\((\w+)\)', replace = "($1)" },
  # Handle breaking changes
  { pattern = '!:', replace = ":" },
]
# regex for parsing and grouping commits
commit_parsers = [
  # Features and enhancements
  { message = "^feat", group = "🚀 Features" },
  { message = "^feature", group = "🚀 Features" },
  { message = "^add", group = "🚀 Features" },
  { message = "^implement", group = "🚀 Features" },
  # Bug fixes
  { message = "^fix", group = "🐛 Bug Fixes" },
  { message = "^bug", group = "🐛 Bug Fixes" },
  { message = "^resolve", group = "🐛 Bug Fixes" },
  { message = "^patch", group = "🐛 Bug Fixes" },
  # Performance improvements
  { message = "^perf", group = "⚡ Performance" },
  { message = "^performance", group = "⚡ Performance" },
  { message = "^optimize", group = "⚡ Performance" },
  { message = "^speed", group = "⚡ Performance" },
  # Security fixes
  { message = "^security", group = "🔒 Security" },
  { message = "^sec", group = "🔒 Security" },
  { body = ".*security", group = "🔒 Security" },
  { body = ".*vulnerability", group = "🔒 Security" },
  # Refactoring
  { message = "^refactor", group = "♻️ Refactoring" },
  { message = "^refact", group = "♻️ Refactoring" },
  { message = "^cleanup", group = "♻️ Refactoring" },
  { message = "^clean", group = "♻️ Refactoring" },
  { message = "^restructure", group = "♻️ Refactoring" },
  # Documentation
  { message = "^docs?", group = "📚 Documentation" },
  { message = "^doc", group = "📚 Documentation" },
  { message = "^documentation", group = "📚 Documentation" },
  { message = "^readme", group = "📚 Documentation" },
  { message = "^comment", group = "📚 Documentation" },
  # Testing
  { message = "^test", group = "🧪 Testing" },
  { message = "^tests", group = "🧪 Testing" },
  { message = "^testing", group = "🧪 Testing" },
  { message = "^spec", group = "🧪 Testing" },
  { message = "^unit", group = "🧪 Testing" },
  { message = "^integration", group = "🧪 Testing" },
  # Build and CI/CD
  { message = "^build", group = "🔧 Build System" },
  { message = "^gradle", group = "🔧 Build System" },
  { message = "^maven", group = "🔧 Build System" },
  { message = "^ci", group = "👷 CI/CD" },
  { message = "^workflow", group = "👷 CI/CD" },
  { message = "^github", group = "👷 CI/CD" },
  { message = "^action", group = "👷 CI/CD" },
  # Code style and formatting
  { message = "^style", group = "💄 Styling" },
  { message = "^format", group = "💄 Styling" },
  { message = "^lint", group = "💄 Styling" },
  { message = "^prettier", group = "💄 Styling" },
  # Reverts
  { message = "^revert", group = "⏪ Reverts" },
  { message = "^rollback", group = "⏪ Reverts" },
  { message = "^undo", group = "⏪ Reverts" },
  # Dependencies and package management
  { message = "^chore\\(deps\\)", group = "📦 Dependencies" },
  { message = "^deps", group = "📦 Dependencies" },
  { message = "^dependencies", group = "📦 Dependencies" },
  { message = "^dependency", group = "📦 Dependencies" },
  { message = "^update.*depend", group = "📦 Dependencies" },
  { message = "^bump", group = "📦 Dependencies" },
  { message = "^upgrade", group = "📦 Dependencies" },
  # Configuration changes
  { message = "^config", group = "⚙️ Configuration" },
  { message = "^configuration", group = "⚙️ Configuration" },
  { message = "^settings", group = "⚙️ Configuration" },
  { message = "^properties", group = "⚙️ Configuration" },
  # Initial commits and major changes
  { message = "^initial", group = "🎉 Initial" },
  { message = "^init", group = "🎉 Initial" },
  { message = "^first", group = "🎉 Initial" },
  { message = "^create", group = "🎉 Initial" },
  { message = "^setup", group = "🎉 Initial" },
  # Release and version related
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^release", group = "🏷️ Release" },
  { message = "^version", group = "🏷️ Release" },
  { message = "^tag", group = "🏷️ Release" },
  # Skip certain patterns (keep these towards the end)
  { message = "^docs: update.*badges.*\\[skip ci\\]", skip = true },
  { message = ".*\\[skip ci\\]", skip = true },
  { message = "^merge", skip = true },
  { message = "^wip", skip = true },
  { message = "^work in progress", skip = true },
  # Chores and maintenance (broad catch-all)
  { message = "^chore", group = "🔨 Maintenance" },
  { message = "^maintenance", group = "🔨 Maintenance" },
  { message = "^maint", group = "🔨 Maintenance" },
  { message = "^housekeeping", group = "🔨 Maintenance" },
  # Catch-all for any remaining commits (this should be last)
  { message = ".*", group = "📝 Other Changes" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# filter out the commits that are not matched by commit parsers
filter_commits = false  # Changed to false to include old commits
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = ".*-dev$"
# regex for ignoring tags
ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

# Git-cliff will automatically detect GitHub remote information
# No need to manually specify [remote.github] section
